import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:kmg/screens/legal/contact_support_screen.dart';
import 'sign_up_screen.dart'; // Ensure this path is correct

class SignInScreen extends StatefulWidget {
  const SignInScreen({super.key, required bool fromFab});

  @override
  State<SignInScreen> createState() => _SignInScreenState();
}

class _SignInScreenState extends State<SignInScreen> {
  final _formKey = GlobalKey<FormState>();
  final FirebaseAuth _auth = FirebaseAuth.instance;

  String email = '';
  String password = '';
  bool isLoading = false;
  bool isPasswordVisible = false;

  bool _showForgotPassword = true;
  bool _isEnglish = true; // true = English, false = Malayalam

  // --- Multi-language mapping ---
  String _getTranslatedText(String key) {
    // Retaining your translation map
    final Map<String, Map<String, String>> translations = {
      'en': {
        'welcome': 'Welcome Back!',
        'subtitle': 'Sign in to access your profile and listings.',
        'email_label': 'Email Address',
        'password_label': 'Password',
        'sign_in': 'SIGN IN',
        'forgot_password': 'Forgot Password?',
        'help': 'Need Help?',
        'create_account': 'CREATE NEW ACCOUNT',
        'reset_title': 'Password Reset Assistance',
        'reset_message_1':
            'If you requested a password reset, check your email:',
        'reset_message_2': '1. Check the Spam or Junk folder.',
        'reset_message_3': '2. Wait 5 minutes for delivery.',
        'reset_message_4': '3. Ensure you entered the correct email.',
        'reset_contact': 'Still need help? Contact Support.',
        'reset_done': 'I Checked, Done',
        'email_reset_sent':
            "Password reset email sent to $email. Check your inbox!",
        'email_validation': "Please enter your email to reset the password.",
        'sign_in_failed': "Sign in failed",
        'welcome_back': "Welcome back! üëã",
      },
      'ml': {
        'welcome': '‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µÜ ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç!',
        'subtitle':
            '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥™‡µç‡¥∞‡µä‡¥´‡µà‡¥≤‡µÅ‡¥Ç ‡¥≤‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥ø‡¥Ç‡¥ó‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥Ü‡¥ï‡µç‚Äå‡¥∏‡¥∏‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥∏‡µà‡µª ‡¥á‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.',
        'email_label': '‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ ‡¥µ‡¥ø‡¥≤‡¥æ‡¥∏‡¥Ç',
        'password_label': '‡¥™‡¥æ‡¥∏‡µç‚Äå‡¥µ‡µá‡µº‡¥°‡µç',
        'sign_in': '‡¥∏‡µà‡µª ‡¥á‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï',
        'forgot_password': '‡¥™‡¥æ‡¥∏‡µç‚Äå‡¥µ‡µá‡µº‡¥°‡µç ‡¥Æ‡¥±‡¥®‡µç‡¥®‡µÅ‡¥™‡µã‡¥Ø‡µã?',
        'help': '‡¥∏‡¥π‡¥æ‡¥Ø‡¥Ç ‡¥µ‡µá‡¥£‡µã?',
        'create_account': '‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥Ö‡¥ï‡µç‡¥ï‡µó‡¥£‡µç‡¥ü‡µç ‡¥∏‡µÉ‡¥∑‡µç‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï',
        'reset_title': '‡¥™‡¥æ‡¥∏‡µç‚Äå‡¥µ‡µá‡µº‡¥°‡µç ‡¥±‡µÄ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥∏‡¥π‡¥æ‡¥Ø‡¥Ç',
        'reset_message_1':
            '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥í‡¥∞‡µÅ ‡¥™‡¥æ‡¥∏‡µç‚Äå‡¥µ‡µá‡µº‡¥°‡µç ‡¥±‡µÄ‡¥∏‡µÜ‡¥±‡µç‡¥±‡¥ø‡¥®‡¥æ‡¥Ø‡¥ø ‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥ø‡¥ö‡µç‡¥ö‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ, ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï:',
        'reset_message_2': '1. ‡¥∏‡µç‡¥™‡¥æ‡¥Ç ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥ú‡¥ô‡µç‡¥ï‡µç ‡¥´‡µã‡µæ‡¥°‡µº ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
        'reset_message_3': '2. ‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ ‡¥é‡¥§‡µç‡¥§‡¥æ‡µª 5 ‡¥Æ‡¥ø‡¥®‡¥ø‡¥±‡µç‡¥±‡µç ‡¥ï‡¥æ‡¥§‡µç‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
        'reset_message_4': '3. ‡¥∂‡¥∞‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ ‡¥®‡µΩ‡¥ï‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µÜ‡¥®‡µç‡¥®‡µç ‡¥â‡¥±‡¥™‡µç‡¥™‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï.',
        'reset_contact': '‡¥á‡¥®‡¥ø‡¥Ø‡µÅ‡¥Ç ‡¥∏‡¥π‡¥æ‡¥Ø‡¥Ç ‡¥µ‡µá‡¥£‡¥Æ‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ? ‡¥∏‡¥™‡µç‡¥™‡µã‡µº‡¥ü‡µç‡¥ü‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥ï.',
        'reset_done': '‡¥û‡¥æ‡µª ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ö‡µç‡¥ö‡µÅ, ‡¥∂‡¥∞‡¥ø‡¥Ø‡¥æ‡¥Ø‡¥ø',
        'email_reset_sent':
            "‡¥™‡¥æ‡¥∏‡µç‚Äå‡¥µ‡µá‡µº‡¥°‡µç ‡¥±‡µÄ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ $email-‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥Ö‡¥Ø‡¥ö‡µç‡¥ö‡µÅ. ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥á‡µª‡¥¨‡µã‡¥ï‡µç‡¥∏‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï!",
        'email_validation':
            "‡¥™‡¥æ‡¥∏‡µç‚Äå‡¥µ‡µá‡µº‡¥°‡µç ‡¥±‡µÄ‡¥∏‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï.",
        'sign_in_failed': "‡¥∏‡µà‡µª ‡¥á‡µª ‡¥™‡¥∞‡¥æ‡¥ú‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü‡µÅ",
        'welcome_back': "‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µÜ ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç! üëã",
      },
    };
    final langKey = _isEnglish ? 'en' : 'ml';
    return translations[langKey]![key] ?? translations['en']![key]!;
  }

  void _toggleLanguage() {
    setState(() {
      _isEnglish = !_isEnglish;
    });
  }

  Future<void> _signIn() async {
    if (!_formKey.currentState!.validate()) return;
    _formKey.currentState!.save();

    setState(() {
      isLoading = true;
    });

    try {
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      final doc = await FirebaseFirestore.instance
          .collection('users')
          .doc(userCredential.user!.uid)
          .get();

      bool isAdmin = doc.exists ? doc.data()!['admin'] == true : false;

      if (!mounted) return;

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(_getTranslatedText('welcome_back'))),
      );

      Navigator.pop(context, {'signedIn': true, 'isAdmin': isAdmin});
    } on FirebaseAuthException catch (e) {
      if (!mounted) return;

      if (e.code == 'wrong-password' || e.code == 'user-not-found') {
        setState(() {
          _showForgotPassword = true;
        });
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(e.message ?? _getTranslatedText('sign_in_failed')),
        ),
      );
    } finally {
      if (mounted) {
        setState(() => isLoading = false);
      }
    }
  }

  Future<void> _forgotPassword() async {
    _formKey.currentState!.save();

    if (email.isEmpty || !email.contains('@')) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(_getTranslatedText('email_validation'))),
      );
      return;
    }

    setState(() => isLoading = true);

    try {
      await _auth.sendPasswordResetEmail(email: email);

      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(_getTranslatedText('email_reset_sent'))),
      );
    } on FirebaseAuthException catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(e.message ?? "Failed to send reset email.")),
      );
    } finally {
      if (mounted) {
        setState(() => isLoading = false);
      }
    }
  }

  void _showEmailHelpDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(_getTranslatedText('reset_title')),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(_getTranslatedText('reset_message_1')),
                const SizedBox(height: 10),
                Text(_getTranslatedText('reset_message_2')), // Check Spam
                Text(_getTranslatedText('reset_message_3')), // Wait
                Text(_getTranslatedText('reset_message_4')), // Correct Email
                const SizedBox(height: 20),
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop(); // Close dialog
                    // Navigate to Contact Us Screen
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (_) =>
                            const ContactSupportScreen('password_reset'),
                      ),
                    );
                  },
                  child: Text(_getTranslatedText('reset_contact')),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text(_getTranslatedText('reset_done')),
            ),
          ],
        );
      },
    );
  }

  void _navigateToSignUp() {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (_) => const SignUpScreen(fromFab: true)),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final primaryColor = theme.colorScheme.primary;

    return Scaffold(
      appBar: AppBar(
        title: Text(_getTranslatedText('sign_in')),
        actions: [
          // Language Toggle Button
          TextButton(
            onPressed: _toggleLanguage,
            child: Text(
              _isEnglish ? '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç' : 'English',
              style: const TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 32),
        child: isLoading
            ? Center(child: CircularProgressIndicator(color: primaryColor))
            : Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _getTranslatedText('welcome'),
                    style: theme.textTheme.headlineMedium!.copyWith(
                      color: primaryColor,
                      fontSize: 32,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _getTranslatedText('subtitle'),
                    style: theme.textTheme.bodyMedium,
                  ),
                  const SizedBox(height: 40),

                  Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        // --- Email Field ---
                        TextFormField(
                          decoration: InputDecoration(
                            labelText: _getTranslatedText('email_label'),
                            prefixIcon: Icon(
                              Icons.email_outlined,
                              color: primaryColor,
                            ),
                          ),
                          keyboardType: TextInputType.emailAddress,
                          onSaved: (val) => email = val!.trim(),
                          style: theme.textTheme.bodyLarge,
                        ),
                        const SizedBox(height: 20),

                        // --- Password Field ---
                        TextFormField(
                          decoration: InputDecoration(
                            labelText: _getTranslatedText('password_label'),
                            prefixIcon: Icon(
                              Icons.lock_outline,
                              color: primaryColor,
                            ),
                            suffixIcon: IconButton(
                              icon: Icon(
                                isPasswordVisible
                                    ? Icons.visibility
                                    : Icons.visibility_off,
                                color: theme.textTheme.bodyMedium!.color,
                              ),
                              onPressed: () {
                                setState(
                                  () => isPasswordVisible = !isPasswordVisible,
                                );
                              },
                            ),
                          ),
                          obscureText: !isPasswordVisible,
                          onSaved: (val) => password = val!.trim(),
                          style: theme.textTheme.bodyLarge,
                        ),

                        const SizedBox(height: 10),

                        // --- FIX APPLIED HERE: Using FittedBox to prevent text overflow in Row ---
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            // 1. The Help/Sahaayam icon (Left side)
                            FittedBox(
                              // Ensures the long Malayalam text scales down to fit
                              child: TextButton.icon(
                                onPressed: _showEmailHelpDialog,
                                icon: Icon(
                                  Icons.help_outline,
                                  color: primaryColor,
                                  size: 18,
                                ),
                                label: Text(
                                  _getTranslatedText('help'),
                                  style: TextStyle(
                                    color: primaryColor,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                        Row(
                          children: [
                            TextButton(
                              onPressed: _forgotPassword,
                              child: Text(
                                _getTranslatedText('forgot_password'),
                                style: TextStyle(
                                  color: primaryColor,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                          ],
                        ),

                        // --- END FIX ---
                        const SizedBox(height: 20),

                        // --- Sign In Button ---
                        SizedBox(
                          width: double.infinity,
                          height: 50,
                          child: ElevatedButton(
                            onPressed: _signIn,
                            child: Text(_getTranslatedText('sign_in')),
                          ),
                        ),
                        const SizedBox(height: 20),

                        // --- Divider and Sign Up ---
                        Row(
                          children: [
                            Expanded(
                              child: Divider(
                                color: theme.textTheme.bodyMedium!.color,
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 10,
                              ),
                              child: Text(
                                "OR",
                                style: theme.textTheme.bodyMedium,
                              ),
                            ),
                            Expanded(
                              child: Divider(
                                color: theme.textTheme.bodyMedium!.color,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 20),
                        SizedBox(
                          width: double.infinity,
                          height: 50,
                          child: OutlinedButton(
                            onPressed: _navigateToSignUp,
                            style: OutlinedButton.styleFrom(
                              side: BorderSide(color: primaryColor, width: 2),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                            child: Text(
                              _getTranslatedText('create_account'),
                              style: TextStyle(color: primaryColor),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
      ),
    );
  }
}
